// Code generated by protoc-gen-go. DO NOT EDIT.
// source: timep/timep.proto

package timep

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TimeRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeRequest) Reset()         { *m = TimeRequest{} }
func (m *TimeRequest) String() string { return proto.CompactTextString(m) }
func (*TimeRequest) ProtoMessage()    {}
func (*TimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72372096a64749c0, []int{0}
}

func (m *TimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeRequest.Unmarshal(m, b)
}
func (m *TimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeRequest.Marshal(b, m, deterministic)
}
func (m *TimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeRequest.Merge(m, src)
}
func (m *TimeRequest) XXX_Size() int {
	return xxx_messageInfo_TimeRequest.Size(m)
}
func (m *TimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TimeRequest proto.InternalMessageInfo

func (m *TimeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TimeReply struct {
	Time                 string   `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeReply) Reset()         { *m = TimeReply{} }
func (m *TimeReply) String() string { return proto.CompactTextString(m) }
func (*TimeReply) ProtoMessage()    {}
func (*TimeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_72372096a64749c0, []int{1}
}

func (m *TimeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeReply.Unmarshal(m, b)
}
func (m *TimeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeReply.Marshal(b, m, deterministic)
}
func (m *TimeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeReply.Merge(m, src)
}
func (m *TimeReply) XXX_Size() int {
	return xxx_messageInfo_TimeReply.Size(m)
}
func (m *TimeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeReply.DiscardUnknown(m)
}

var xxx_messageInfo_TimeReply proto.InternalMessageInfo

func (m *TimeReply) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func init() {
	proto.RegisterType((*TimeRequest)(nil), "timep.TimeRequest")
	proto.RegisterType((*TimeReply)(nil), "timep.TimeReply")
}

func init() { proto.RegisterFile("timep/timep.proto", fileDescriptor_72372096a64749c0) }

var fileDescriptor_72372096a64749c0 = []byte{
	// 134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0xc9, 0xcc, 0x4d,
	0x2d, 0xd0, 0x07, 0x93, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xac, 0x60, 0x8e, 0x92, 0x22,
	0x17, 0x77, 0x48, 0x66, 0x6e, 0x6a, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x10, 0x17,
	0x4b, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0xad, 0x24, 0xcf,
	0xc5, 0x09, 0x51, 0x52, 0x90, 0x53, 0x09, 0x52, 0x00, 0xd2, 0x08, 0x53, 0x00, 0x62, 0x1b, 0xd9,
	0x73, 0x71, 0x81, 0x14, 0x04, 0xa7, 0x16, 0x95, 0xa5, 0x16, 0x09, 0x19, 0x72, 0xb1, 0xbb, 0xa7,
	0x96, 0x80, 0x04, 0x84, 0x84, 0xf4, 0x20, 0x36, 0x22, 0xd9, 0x20, 0x25, 0x80, 0x22, 0x56, 0x90,
	0x53, 0xa9, 0xc4, 0x90, 0xc4, 0x06, 0x76, 0x92, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x56, 0x86,
	0xef, 0xe0, 0xa7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TimeServerClient is the client API for TimeServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeServerClient interface {
	GetTime(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeReply, error)
}

type timeServerClient struct {
	cc *grpc.ClientConn
}

func NewTimeServerClient(cc *grpc.ClientConn) TimeServerClient {
	return &timeServerClient{cc}
}

func (c *timeServerClient) GetTime(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*TimeReply, error) {
	out := new(TimeReply)
	err := c.cc.Invoke(ctx, "/timep.TimeServer/GetTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeServerServer is the server API for TimeServer service.
type TimeServerServer interface {
	GetTime(context.Context, *TimeRequest) (*TimeReply, error)
}

// UnimplementedTimeServerServer can be embedded to have forward compatible implementations.
type UnimplementedTimeServerServer struct {
}

func (*UnimplementedTimeServerServer) GetTime(ctx context.Context, req *TimeRequest) (*TimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTime not implemented")
}

func RegisterTimeServerServer(s *grpc.Server, srv TimeServerServer) {
	s.RegisterService(&_TimeServer_serviceDesc, srv)
}

func _TimeServer_GetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeServerServer).GetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timep.TimeServer/GetTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeServerServer).GetTime(ctx, req.(*TimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timep.TimeServer",
	HandlerType: (*TimeServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTime",
			Handler:    _TimeServer_GetTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timep/timep.proto",
}
